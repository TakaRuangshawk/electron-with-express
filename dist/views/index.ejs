<!DOCTYPE html>
<%- include('include/head'); %>
	<html lang="en">
<style>
  body {
        margin: 0;
        padding: 0;
        background: url('./pic/bg_main.jpg') no-repeat center center fixed;
        background-size: cover;
        font-family: Arial, sans-serif;
        animation: fadeIn 1s ease-in-out;
    }
    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
    .reset-input{
      width: 80%;
      font-size: 24px;
      padding: 15px;
    }
    #statusMessage_reset {
        font-size: 26px;
        color: #333;
    }

    #statusMessage_reset.success {
        color: green;
    }

    #statusMessage_reset.error {
        color: red;
    }
    .dropbtn {
      background-color: transparent;
      color: white;
      padding: 16px;
      font-size: 16px;
      border: none;
    }

    .dropdown {
      position: relative;
      display: inline-block;
      width: 50px;
      left: 1100px;
    }

    .dropdown-content {
      display: none;
      position: absolute;
      background-color: #f1f1f1;
      min-width: 160px;
      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
      z-index: 1;
    }

    .dropdown-content a {
      color: black;
      padding: 12px 16px;
      text-decoration: none;
      display: block;
    }

    .dropdown-content a:hover {background-color: #ddd;}

    .dropdown:hover .dropdown-content {display: block;}

    .dropdown:hover .dropbtn {background-color: #797a79;}
    #responseBox {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 10px;
            background: #f9f9f9;
            text-align: left;
            white-space: pre-wrap;
            height: 220px;
            overflow-y: auto;
      }
      .button-selftest{
        font-size: 20px;
      }
</style>
	<body>
		<!-- <h1>
			<%= title %>
		</h1>
		<p>Welcome to <%= title %>
		</p>
		<br />
		<p>Other Pages:</p>
		<a href="/pageTwo">Page Two</a>
		<br />
		<a href="/pageThree">Page Three</a>
		<br />
		<a href="/pageFour">Page Four</a> -->
		<!-- <form id="messageForm">
			<input type="text" id="messageInput" placeholder="Enter your message">
            <button type="button" onclick="sendMessage('sendlog : ' + document.getElementById('messageInput').value)">Send Message</button>

		</form> -->
        <!-- <h1>Welcome, <%= username %>!</h1> -->
        <div class="dropdown">
          <button class="dropbtn"><img width="55px" src="./pic/icon_user.png" /></button>
          <div class="dropdown-content">
            <a style="white-space: nowrap;" id="changePasswordBtn" href="#">Reset Password</a>
            <a href="/">Logout</a>
          </div>
        </div>
        <!-- <button id="changePasswordBtn">Change Password</button> -->
        <button class ="button-19" id="fetchButton" style="position: absolute; top: 485px;left: 90px;background-color: white;border: 0;padding: 0;">
            <img id="fetchedImage" src="./pic/btn_printTotal.jpg" alt="Get Banknote& Print Total" style="width: 250px; height: auto;    border-radius: 30px;">
        </button>
        <button class ="button-19" id="fetchButton3" style="position: absolute; top: 485px;left: 360px;background-color: white;border: 0;padding: 0;">
          <img id="fetchedImage3" src="./pic/btn_sysConfig.png" alt="ChangeKioskCode" style="width: auto; height: 147px;    border-radius: 30px;">
        </button>
        <button class ="button-19" id="fetchButton4" style="position: absolute; top: 485px;left: 590px;background-color: white;border: 0;padding: 0;">
          <img id="fetchedImage4" src="./pic/btn_sysDiagnose.png" alt="SelfTest" style="width: auto; height: 147px;    border-radius: 30px;">
        </button>
        
        <!-- The Modal -->
        <div id="myModal" class="modal">
        
          <!-- Modal content -->
          <div class="modal-content">
            <!-- <span class="close">&times;</span> -->
            <span class="close"></span>
            <div class="" id="statusPicture">
               <img  src="./pic/home_ok.png" style="height: 50px;" /> 
            </div>
            <p id="statusMessage"></p>
            <div class="" id="terminalCDM">
              <img  src="./pic/icon_cdm.png" style="height: 400px;" /> 
           </div>
           <div class="fade-in-out" id="statusPrint">
            <img  src="./pic/icon_print.png" style="height: 100px;" /> 
         </div>
         <div id="htmlContent"></div>
            <div id="tableContainer"></div>
            <button class="button-19" id="fetchButton2" style="position: relative;left: 400px; top: 120px;background-color: white;border: 0;padding: 0;">
              <img id="fetchedImage" src="./pic/btn_replenishCash.jpg" alt="Clear Cassaste" style="width: 250px;height: auto;    border-radius: 30px;">
            </button>
            <button class="button-19" id="exitmodal" style="position: relative;left: 464px; top: 120px;background-color: white;border: 0;padding: 0;">
              <img id="fetchedImage" src="./pic/btn_exit.jpg" alt="Clear Cassaste" style="width: 250px;height: auto;    border-radius: 30px;">
            </button>
          </div>
        
        </div>
        <!-- The Modal -->
        <div id="changePasswordModal" class="modal">
          <div class="modal-content">
              <h2 style="text-align: center;">RESET PASSWORD : <%= username.toUpperCase() %> </h2>
              <form id="changePasswordForm" style="height: 450px;display: flex;flex-wrap: nowrap;flex-direction: column;align-content: center;align-items: center;justify-content: space-evenly;">
                  <!-- <label for="username">Username:</label> -->
                  <input  type="hidden" id="username" name="username" value="<%= username %>" readonly required>
                  <input class ="reset-input" type="password" id="oldPassword" name="oldPassword" required placeholder="OLD PASSWORD">
                  <br>
                  <input class ="reset-input" type="password" id="newPassword" name="newPassword" required placeholder="NEW PASSWORD">
                  <br>
                  <input class ="reset-input" type="password" id="confirmPassword" name="confirmPassword" required placeholder="CONFIRM NEW PASSWORD">
                  <!-- Status Message -->
                  <div id="statusMessage_reset" style="margin-bottom: 20px;"></div>
                  <div  style="bottom: 20px;position: relative;">
                    <button type="submit" style="background: transparent;border: 0;cursor:pointer;"><img style="border-radius: 25px; width: 250px;" src="./pic/btn_ok.jpg" /></button>
                    <button id="close-modal" style="background: transparent;border: 0;cursor:pointer;" type=""><img style="border-radius: 25px;width: 250px;" src="./pic/btn_exit.jpg" /></button>
                  </div>
                  
              </form>
          </div>
        </div>
        <div id="selfTestModal" class="modal">
          <div class="modal-content">
            <h2 style="text-align: center;">System Diagnose</h2>
              <p><strong>Current Kiosk Code: </strong><span id="kioskCodeDisplay">Fetching...</span></p>
              <div class="button-container">
                <button class="button-selftest" onclick="sendApiRequest('devinit')">Devinit</button>
                <button class="button-selftest" onclick="sendApiRequest('checkcardbyteller')">Checkcardbyteller</button>
                <button class="button-selftest" onclick="sendApiRequest('depositstatus-CashInStart')">CashInStart</button>
                <button class="button-selftest" onclick="sendApiRequest('depositstatus-CashIn')">CashIn</button>
                <button class="button-selftest" onclick="sendApiRequest('depositstatus-CashInRollbackNoCancel')">CashInRollbackNoCancel</button>
                <button class="button-selftest" onclick="sendApiRequest('depositstatus-CashInRollback')">CashInRollback</button>
                <button class="button-selftest" onclick="sendApiRequest('depositstatus-CashInEnd')">CashInEnd</button>
            </div>
            <div id="responseBox">API Response will appear here...</div>
            <div  style="position: absolute;left: 500px;bottom: 200px;">
              <button id="close-selftest-modal" style="background: transparent;border: 0;cursor:pointer;" type=""><img style="border-radius: 25px;width: 250px;" src="./pic/btn_exit.jpg" /></button>
            </div>
          </div>
        </div>
        <div id="changeKioskModal" class="modal">
          <div class="modal-content">
            <h2 style="text-align: center;">System Config</h2>
            <form id="changeKioskForm" style="height: 450px;display: flex;flex-wrap: nowrap;flex-direction: column;align-content: center;align-items: center;justify-content: space-evenly;">
              <div style="width: 80%;display: flex;justify-content: space-between;">
                <p style="font-size: 24px; font-weight: 600;"> Current Kiosk Code </p>
                <input style="width: 60%; font-size: 24px; font-weight: 600;" type="text" id="kiosk" name="kiosk" value="Test" readonly required>
              </div>  
              <br>
              <div style="width: 80%;display: flex;justify-content: space-between;">
                <p style="font-size: 24px; font-weight: 600;"> New Kiosk Code </p>
              <input style="width: 60%; font-size: 24px; font-weight: 600;" class ="kiosk-input" type="text" id="newKiosk" name="newKiosk" required placeholder="NEW KIOSK CODE">
              </div>
              
              <div  style="position: relative;">
                <button type="submit" style="background: transparent;border: 0;cursor:pointer;"><img style="border-radius: 25px; width: 250px;" src="./pic/btn_ok.jpg" /></button>
                <button id="close-kiosk-modal" style="background: transparent;border: 0;cursor:pointer;" type=""><img style="border-radius: 25px;width: 250px;" src="./pic/btn_exit.jpg" /></button>
              </div>
            </form>
            
          </div>
        </div>
	</body>
  <pre style="display: none;" id="output"></pre>
    <script>
      let configData = {}; 
      const pElement = document.getElementById('statusMessage');
      let dataString = '';
      sendMessage('[Client] : App Start') ;
      async function loadUsage(filename) {
        try {
            // Fetch the JSON file from the server
            const response = await fetch(`/d1config/${filename}`);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            configData = await response.json();
            
            // Log and display the config data
            console.log('Config data:', configData);
            document.getElementById("output").textContent = JSON.stringify(configData, null, 2);
        } catch (error) {
            console.error('Error in loading usage:', error);
        }
    }

    // Call the function
    loadUsage('appsetting.json');
    function fetchKioskCode() {
            fetch("http://localhost:3000/get-kiosk-code", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    kioskCode = data.kioskCode;
                    document.getElementById("kioskCodeDisplay").innerText = kioskCode;
                } else {
                    alert("Failed to fetch kiosk code from INI file.");
                }
            })
            .catch(error => {
                console.error("Error fetching kiosk code:", error);
            });
        }
      // Get the modal
      var modal = document.getElementById("myModal");
      var kioskmodal = document.getElementById("changeKioskModal");
      var selftestmodal = document.getElementById("selfTestModal"); 
      var span = document.getElementsByClassName("close")[0];
      const data_ab = {
            device_name: '-',
            banknote: [
              { sum: '-', note_name: "2000", value: 2000, note: '-' },
              { sum: '-', note_name: "5000", value: 5000, note: '-' },
              { sum: '-', note_name: "10000", value: 10000, note: '-' },
              { sum: '-', note_name: "50000", value: 50000, note: '-' },
              { sum: '-', note_name: "100000", value: 100000, note: '-' }
            ]
          };
      document.getElementById('fetchButton4').addEventListener('click', function() {
        fetchKioskCode();
        document.getElementById("responseBox").innerText = "Fetching...";
        selftestmodal.style.display = "block";
      });
      document.getElementById('fetchButton3').addEventListener('click', function() {
        kioskmodal.style.display = "block";
        fetch("http://127.0.0.1:3000/get-kiosk-code", {
            method: "POST",  // Using POST as requested
            headers: {
                "Content-Type": "application/json"
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                document.getElementById("kiosk").value = data.kioskCode;
            } else {
                alert("Failed to fetch the current kiosk code.");
            }
        })
        .catch(error => {
            alert("Error fetching kiosk code from server.");
            console.error("Error:", error);
        });
      });
      document.getElementById('fetchButton').addEventListener('click', function() {
        
        modal.style.display = "block";
        document.getElementById('htmlContent').innerHTML = '';
        console.log('Config data2:', configData.env);
        if (configData.env === "dev") {
          // Do hardcode
          
          const data = {
            device_name: configData.devicename,
            banknote: [
              { sum: 40000, note_name: "2000", value: 2000, note: 20 },
              { sum: 100000, note_name: "5000", value: 5000, note: 20 },
              { sum: 300000, note_name: "10000", value: 10000, note: 3000 },
              { sum: 1500000, note_name: "50000", value: 50000, note: 30 },
              { sum: 3000000, note_name: "100000", value: 100000, note: 30 }
            ]
          };
          
          console.log(data);
          const table = createTable(data,1); //normal case

          //const data_err = {"respCode":"False","respDesc":"dev error","errors":[{"devName":"CashInDevice","descrption":"The device is offline"}]}//abnormal case
          //const table = createTable(data_ab,0);
          //document.getElementById('htmlContent').innerHTML ='Err : ['+ data_err.errors[0].devName + '] ' + data_err.errors[0].descrption;
          //sendMessage('[Print Request] : Failed' + ' && Err : ['+ data_err.errors[0].devName + '] ' + data_err.errors[0].descrption);

          document.getElementById('tableContainer').innerHTML = ''; // Clear previous table
          document.getElementById('tableContainer').appendChild(table);   
          
          dataString = dataToString(data); //normal case
          
          //dataString = dataToString(data_ab); //abnormal case
          sendMessage('[GetBankNote Request] : ' + dataString);
          const postData = {
            device_name: data.device_name,
            banknote: data.banknote.map(note => ({
              note_name: note.note_name,
              value: note.value,
              note: note.note,
              sum: note.sum
            })),
            total_bank_note: data.banknote.length,
            total_amount: data.banknote.reduce((total, note) => total + note.value * note.note, 0),
            update: new Date().toISOString()
          };
          sendMessage('[Print Request] : Complete');
        } else {
        // Do fetch
        fetch('http://localhost:5001/lpk/api/v1/kiosk/banknote', {
          method: 'GET',
          headers: {
            'Accept': '*/*',
            'Content-Type': 'application/json',
            'apikey': '11d976dd-32b4-4449-b4a1-ed27a01014f2'
          },
        })
          .then(response => response.json()) // Convert response to JSON
          .then(data => {
           
            console.log(data);
            dataString = dataToString(data);
            sendMessage('[GetBankNote Request] : ' + dataString);
            const table = createTable(data,1);
            document.getElementById('tableContainer').innerHTML = ''; // Clear previous table
            document.getElementById('tableContainer').appendChild(table);
            // Create the payload for the POST request
            const postData = {
              device_name: data.device_name,
              banknote: data.banknote.map(note => ({
                note_name: note.note_name,
                value: note.value,
                note: note.note,
                sum: note.sum
              })),
              total_bank_note: data.banknote.length,
              total_amount: data.banknote.reduce((total, note) => total + note.value * note.note, 0),
              update: new Date().toISOString()
            };
            console.log(postData);
            fetch('http://localhost:5001/lpk/api/v1/kiosk/print_total_banknote', {
              method: 'POST',
              headers: {
                'Accept': '*/*',
                'Content-Type': 'application/json',
                'apikey': '11d976dd-32b4-4449-b4a1-ed27a01014f2'
              },
              body: JSON.stringify(postData)
            })
            .then(response => response.json())
            .then(result => {
              console.log('Success:', result);
              sendMessage('[Print Request] : Complete');
              // document.getElementById('htmlContent').innerHTML = JSON.stringify(result, null, 2);
            })
            .catch(error => {
              console.error('Error:', error);
              const table = createTable(data_ab, 0);
              document.getElementById('htmlContent').innerHTML = 'Err : [' + error.errors[0].devName + '] ' + error.errors[0].descrption;
              document.getElementById('tableContainer').innerHTML = ''; // Clear previous table
              document.getElementById('tableContainer').appendChild(table); 
              sendMessage('[Print Request] : Failed' + ' && Err : [' + error.errors[0].devName + '] ' + error.errors[0].descrption);
            });
          })
          .catch(error => {
            console.error('Error:', error);
            const table = createTable(data_ab, 0);
            document.getElementById('htmlContent').innerHTML = 'Err : The device is offline.';
            document.getElementById('tableContainer').innerHTML = ''; // Clear previous table
            document.getElementById('tableContainer').appendChild(table); 
            sendMessage('[GetBankNote Request] : Failed' + ' && Err : Err : The device is offline.');
          });
        }
        
      });
    document.getElementById('fetchButton2').addEventListener('click', function() {
      document.getElementById('htmlContent').innerHTML = ''
      const data_err = {"respCode":"False","respDesc":"print form error","errors":[{"devName":"ReceiptPrinter","descrption":"Due to a hardware error or other condition,the state of the cash units cannot be determined"}]};
      if (configData.env === 'dev') {
        document.getElementById('htmlContent').innerHTML ='Err : ['+ data_err.errors[0].devName + '] \n' + data_err.errors[0].descrption;
        sendMessage('[Replenish Request] : Incomplete'+ ' && Err : ['+ data_err.errors[0].devName + '] ' + data_err.errors[0].descrption);
        recreateTable(0);
        let errMsg = 'An unexpected error occurred';
            let devName = 'Unknown Device';
            if (data_err instanceof SyntaxError) {
                errMsg = 'Error parsing JSON data';
            } else if (data_err.errors && data_err.errors[0] && data_err.errors[0].devName) {
                errMsg = data_err.errors[0].descrption; // assuming the property name is 'description'
                devName = data_err.errors[0].devName;
                console.log(errMsg + ' : ' + devName);
            } else if (data_err.message) {
                errMsg = data_err.message;
            }
        document.getElementById('htmlContent').innerHTML = 'Err : Something Went Wrong.';
        sendMessage('[Replenish Request] : Incomplete');
        //recreateTable(1);
        //sendMessage('[Replenish Request] : Complete');
      }
      else{
        fetch('http://localhost:5001/lpk/api/v1/kiosk/set_banknote', {
          method: 'POST',
          headers: {
            'Accept': '*/*',
            'Content-Type': 'application/json',
            'apikey': '11d976dd-32b4-4449-b4a1-ed27a01014f2'
          },
          body: JSON.stringify({
            "device_name": configData.devicename,
            "banknote": [
              { "note_name": "20", "value": 20, "note": 0 },
              { "note_name": "50", "value": 50, "note": 0 },
              { "note_name": "100", "value": 100, "note": 0 },
              { "note_name": "500", "value": 500, "note": 0 },
              { "note_name": "1000", "value": 1000, "note": 0 }
            ]
          })
        })
        .then(response => response.json())
        .then(data => {
          // document.getElementById('htmlContent').innerHTML = JSON.stringify(data, null, 2);
          console.log('Success:', data);
          sendMessage('[Replenish Request] : Complete');
          recreateTable(1);
        })
         .catch(error => {
            console.error('Error:', error);
            let errMsg = 'Something Went Wrong';
            let devName = 'CashPayment  ';
            if (error instanceof SyntaxError) {
                errMsg = 'Error parsing JSON data';
            } else if (error.errors && error.errors[0] && error.errors[0].devName) {
                errMsg = error.errors[0].description; // assuming the property name is 'description'
                devName = error.errors[0].devName;
            } else if (error.message) {
                errMsg = error.message;
            }
            document.getElementById('htmlContent').innerHTML = 'Err: [' + devName + '] ' + errMsg;
            recreateTable(0);
            sendMessage('[Replenish Request] : Incomplete && Err: [' + devName + '] ' + errMsg);
          });
      }
    });
    </script>
	<script>
   function createTable(data,flag) {
    pElement.textContent = '';
      const table = document.createElement('table');
      const headerRow = table.insertRow();

      // Define the desired header order
      const headerOrder = ['note_name', 'note', 'sum'];
      const headerNames = {
        note_name: 'Banknotes',
        note: 'PCS.',
        sum: 'Amounts'
      };
    
      // Create header cells in the defined order
      headerOrder.forEach(key => {
        const headerCell = document.createElement('th');
        headerCell.textContent = headerNames[key];
        headerRow.appendChild(headerCell);
      });
    
      // Initialize total variables
      let totalPCS = 0;
      let totalAmounts = 0;
      
      // Create data rows and calculate totals
      data.banknote.forEach(note => {
        const row = table.insertRow();
        headerOrder.forEach(key => {
          const cell = row.insertCell();
          cell.style.textAlign = 'right';
          cell.style.paddingRight = '15px';
           if (key === 'sum') {
                // Calculate the sum as value * note if note is a number
                if (!isNaN(parseInt(note.note))) {
                    const sum = (parseInt(note.value) * parseInt(note.note))/100;
                    cell.textContent = sum.toLocaleString();
                    totalAmounts += sum;
                } else {
                    cell.textContent = '-';
                }
            } else if (key === 'note') {
                // Parse the note as an integer if it's a number
                if (!isNaN(parseInt(note.note))) {
                    const pcs = parseInt(note.note);
                    cell.textContent = pcs.toLocaleString();
                    totalPCS += pcs;
                } else {
                    cell.textContent = '-';
                }
            } else if (key === 'note_name') {
                // Format the note_name with commas and add the '฿' symbol
                const formattedNoteName = parseInt(note[key]/100).toLocaleString() + ' THB';
                cell.textContent = formattedNoteName;
            } else {
                cell.textContent = note[key];
            }
        });
      var image = document.getElementById('statusPicture').querySelector('img');
      var statusPrint = document.getElementById('statusPrint');
      var fetchButton2 = document.getElementById('fetchButton2');
      if(flag === 1){
        pElement.textContent = 'Print Total Successful';
        image.src = './pic/home_ok.png';
        statusPrint.style.display = 'block';
        fetchButton2.disabled = false; // Ensure button is enabled
        fetchButton2.style.filter = 'none'; // Reset image to its original state
      }
      else {
        pElement.textContent = 'Print Total Fail';
        image.src = './pic/home_error.png';
        statusPrint.style.display = 'none';
        fetchButton2.disabled = true; // Disable the button
        fetchButton2.style.filter = 'grayscale(100%)'; // Change the image to gray
      }
      });
    
      // Add total row
      const totalRow = table.insertRow();
      const totalBanknoteCell = totalRow.insertCell();
      totalBanknoteCell.textContent = 'TOTAL';
      totalBanknoteCell.style.textAlign = 'right';
      totalBanknoteCell.style.paddingRight = '15px';
      totalBanknoteCell.colSpan = 1;
      const totalPCSCell = totalRow.insertCell();
      totalPCSCell.textContent = totalPCS.toLocaleString();
      totalPCSCell.style.textAlign = 'right';
      totalPCSCell.style.paddingRight = '15px';
      const totalAmountsCell = totalRow.insertCell();
      totalAmountsCell.textContent = totalAmounts.toLocaleString();
      totalAmountsCell.style.textAlign = 'right';
      totalAmountsCell.style.paddingRight = '15px';
    
      return table;
    }



        
    span.onclick = function() {
      modal.style.display = "none";
      changePasswordModal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function(event) {
      if (event.target == modal) {
        modal.style.display = "none";
        changePasswordModal.style.display = "none";
      }
    }
    // Function to delete inner table and recreate it
    function recreateTable(flag) {
        pElement.textContent = '';
        // Get the container div
        const tableContainer = document.getElementById('tableContainer');
        
        if(flag === 1){

        tableContainer.innerHTML = '';
        
        // Create new table elements
        const table = document.createElement('table');
        const tbody = document.createElement('tbody');
    
        // Define the table data
        const tableData = [
            { banknote: "Banknotes", pcs: "PCS.", amount: "Amounts" },
            { banknote: '20 THB', pcs: 0, amount: 0 },
            { banknote: '50 THB', pcs: 0, amount: 0 },
            { banknote: '100 THB', pcs: 0, amount: 0 },
            { banknote: '500 THB', pcs: 0, amount: 0 },
            { banknote: '1,000 THB', pcs: 0, amount: 0 },
            { banknote: "TOTAL", pcs: 0, amount: 0, colspan: 1 }
        ];
    
        // Loop through the data and create rows and cells
        tableData.forEach((row, index) => {
            const tr = document.createElement('tr');
        
            if (index === 0) {
                // Create header row
                const th1 = document.createElement('th');
                const th2 = document.createElement('th');
                const th3 = document.createElement('th');
                th1.textContent = row.banknote;
                th2.textContent = row.pcs;
                th3.textContent = row.amount;
                tr.appendChild(th1);
                tr.appendChild(th2);
                tr.appendChild(th3);
            } else {
                // Create data rows
                const td1 = document.createElement('td');
                const td2 = document.createElement('td');
                const td3 = document.createElement('td');
                td1.textContent = row.banknote;
                td1.style.textAlign = 'right';
                td1.style.paddingRight = '15px';
                td2.textContent = row.pcs;
                td2.style.textAlign = 'right';
                td2.style.paddingRight = '15px';
                td3.textContent = row.amount;
                td3.style.textAlign = 'right';
                td3.style.paddingRight = '15px';

            
                if (row.colspan) {
                    td1.colSpan = row.colspan;
                }
              
                tr.appendChild(td1);
                tr.appendChild(td2);
                tr.appendChild(td3);
            }
          
            tbody.appendChild(tr);
        });
      
        // Append tbody to table
        table.appendChild(tbody);
      
        // Append table to the container
        tableContainer.appendChild(table);
                  
      }
      else {
        //same table as createtable
      }
        var image = document.getElementById('statusPicture').querySelector('img');
        //pElement.textContent = 'Replenish Complete';
        if(flag === 1){
        pElement.textContent = 'Replenish Cash Successful';
        image.src = './pic/home_ok.png';
        statusPrint.style.display = 'block';
        }
        else {
        pElement.textContent = 'Replenish Cash Fail';
        image.src = './pic/home_error.png';
        statusPrint.style.display = 'none';
        }

    }

    //modal reset password handle
     // Get the modal
     var changePasswordModal = document.getElementById("changePasswordModal");

      // Get the button that opens the modal
      var changePasswordBtn = document.getElementById("changePasswordBtn");

      var closeModalBtn = document.getElementById("close-modal");
      var closeKioskModalBtn = document.getElementById("close-kiosk-modal");
      var closeSelfTestModalBtn = document.getElementById("close-selftest-modal");
      var exitModalBtn = document.getElementById("exitmodal");
      // When the user clicks the button, open the modal 
      changePasswordBtn.onclick = function() {
          document.getElementById('changePasswordForm').reset();
          const statusMessage = document.getElementById('statusMessage');
          statusMessage.textContent = '';
          statusMessage.className = '';
          document.querySelectorAll('.reset-input').forEach(input => input.classList.remove('error'));
          changePasswordModal.style.display = "block";

      }
      closeSelfTestModalBtn.onclick = function() {
        selftestmodal.style.display = "none";
      }
      closeModalBtn.onclick = function() {
          changePasswordModal.style.display = "none";
      }
      closeKioskModalBtn.onclick = function() {
          kioskmodal.style.display = "none";
      }
      exitModalBtn.onclick = function() {
          modal.style.display = "none";
      }


      // When the user clicks anywhere outside of the modal, close it
      window.onclick = function(event) {
          if (event.target == changePasswordModal) {
              changePasswordModal.style.display = "none";
          }
      }

      document.getElementById('changePasswordForm').addEventListener('submit', async function(event) {
          event.preventDefault();
      
          const username = document.getElementById('username').value;
          const oldPassword = document.getElementById('oldPassword').value;
          const newPassword = document.getElementById('newPassword').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          // Clear previous status messages and input styles
          const statusMessage_reset = document.getElementById('statusMessage_reset');
          statusMessage_reset.textContent = '';
          statusMessage_reset.className = '';
          // Validate inputs
          if (newPassword.length < 6) {
              document.getElementById('newPassword').classList.add('error');
              statusMessage_reset.textContent = 'Please enter password more than 6 digit.';
              statusMessage_reset.classList.add('error');
              return;
          }
          if (newPassword !== confirmPassword) {
              document.getElementById('newPassword').classList.add('error');
              document.getElementById('confirmPassword').classList.add('error');
              statusMessage_reset.textContent = 'Please enter the same value again.';
              statusMessage_reset.classList.add('error');
              return;
          }
          try {
              const response = await fetch('/change-password', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ username, oldPassword, newPassword })
              });
            
              const result = await response.json();
              if (response.ok) {
                statusMessage_reset.textContent = 'Password changed successfully';
                statusMessage_reset.classList.add('success');
                document.getElementById('changePasswordForm').reset();
              } else {
                  throw new Error(result.error || 'Password change failed');
              }
                } catch (error) {
                  if (error.message === 'Incorrect old password') {
                      document.getElementById('oldPassword').classList.add('error');
                      statusMessage_reset.textContent = 'Please enter correct password.';
                  } else {
                    statusMessage_reset.textContent = 'Error: ' + error.message;
                  }
                  statusMessage_reset.classList.add('error');
              }
      });
      // Submit the form using fetch and call the updateBothConfigsHandler
document.getElementById("changeKioskForm").addEventListener("submit", function (event) {
    event.preventDefault(); // Prevent the default form submission behavior

    const newValue = document.getElementById("newKiosk").value;

    fetch("http://127.0.0.1:3000/update-both-configs", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ newValue: newValue })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("Network response was not ok");
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            alert("Both INI files updated successfully!");
            document.getElementById("changeKioskModal").style.display = "none";
        } else {
            alert("Failed to update the INI files.");
        }
    })
    .catch(error => {
        alert("Error submitting the kiosk code.");
        console.error("Error:", error);
    });
});
function sendApiRequest(action) {
            const apiKey = "953fad28617cbe053e74b21c731469ad";
            let apiUrl = "http://localhost:5001/lpk/api/v1/kiosk/";
            let requestBody = {};

            if (!kioskCode) {
                alert("Kiosk Code not loaded. Please try again later.");
                return;
            }

            // Prepare URL and Body for each API call using kioskCode
            switch (action) {
                case "devinit":
                    apiUrl += "devinit";
                    requestBody = { "kioskCode": kioskCode };
                    break;

                case "checkcardbyteller":
                    apiUrl += "checkcardbyteller";
                    requestBody = {
                        "clientTranid": "3f601174-3917-09a2-5ad2-a123d1a8c2c6",
                        "kioskCode": kioskCode
                    };
                    break;

                case "depositstatus-CashInStart":
                    apiUrl += "depositstatus";
                    requestBody = {
                        "kioskCode": kioskCode,
                        "kioskRefId": "230911125200-1570001",
                        "kisokMode": "CashInStart",
                        "clientTranid": "3f601174-3917-09a2-5ad2-a123d1a8c2c6"
                    };
                    break;

                case "depositstatus-CashIn":
                    apiUrl += "depositstatus";
                    requestBody = {
                        "kioskCode": kioskCode,
                        "kioskRefId": "230911125200-1570001",
                        "kisokMode": "CashIn",
                        "clientTranid": "3f601174-3917-09a2-5ad2-a123d1a8c2c6"
                    };
                    break;

                case "depositstatus-CashInRollbackNoCancel":
                    apiUrl += "depositstatus";
                    requestBody = {
                        "kioskCode": kioskCode,
                        "kioskRefId": "230911125200-1570001",
                        "kisokMode": "CashInRollbackNoCancel",
                        "clientTranid": "3f601174-3917-09a2-5ad2-a123d1a8c2c6"
                    };
                    break;

                case "depositstatus-CashInRollback":
                    apiUrl += "depositstatus";
                    requestBody = {
                        "kioskCode": kioskCode,
                        "kioskRefId": "230911125200-1570001",
                        "kisokMode": "CashInRollback",
                        "clientTranid": "3f601174-3917-09a2-5ad2-a123d1a8c2c6"
                    };
                    break;

                case "depositstatus-CashInEnd":
                    apiUrl += "depositstatus";
                    requestBody = {
                        "kioskCode": kioskCode,
                        "kioskRefId": "230911125200-1570001",
                        "kisokMode": "CashInEnd",
                        "clientTranid": "3f601174-3917-09a2-5ad2-a123d1a8c2c6"
                    };
                    break;

                default:
                    alert("Invalid API action!");
                    return;
            }

            // Send the request using fetch
            fetch(apiUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "apikey": apiKey
                },
                body: JSON.stringify(requestBody)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP Error: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                document.getElementById("responseBox").innerText = 
                    `Response from ${action}:\n${JSON.stringify(data, null, 2)}`;
            })
            .catch(error => {
                document.getElementById("responseBox").innerText = 
                    `Error: ${error.message}`;
            });
        }
    </script>
	</html>